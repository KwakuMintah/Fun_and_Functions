/*
comp(re,im)
add
sub
mult
square?
power
abs
other things (wiki)
*/

#include <iostream>
#include <math.h>
using namespace std;
#ifndef COMPLEXHEADERDEF
#define COMPLEXHEADERDEF

double pi = 3.41;

class complexDoub {
public:
	double real;
	double imag;
	complexDoub(double r, double i);
	double abs(complexDoub comp);
	double arg(complexDoub comp);
	complexDoub conj(complexDoub comp);
	complexDoub add(complexDoub compOne, complexDoub compTwo);
	complexDoub sub(complexDoub compOne, complexDoub compTwo);
	void print(complexDoub comp);
	complexDoub logarithm(complexDoub comp, int k);
	complexDoub mult(complexDoub compOne, complexDoub compTwo);
	complexDoub square(complexDoub comp);
	complexDoub power(complexDoub comp, int power);
};

complexDoub::complexDoub(double r, double i) {
	real = r;
	imag = i;
}

double complexDoub::abs(complexDoub comp) {
	double r, i, r_squ, i_squ, squ, abs_val;
	r = comp.real;
	i = comp.imag;
	r_squ = pow(r, 2);
	i_squ = pow(i, 2);
	squ = r_squ + i_squ;
	abs_val = sqrt(squ);
	return abs_val;
}

double complexDoub::arg(complexDoub comp) {
	double r, i, frac, arg_val;
	r = comp.real;
	i = comp.imag;
	frac = i / r;
	arg_val = atan(frac);
	//Output is in Radians
	return arg_val;
}

complexDoub complexDoub::conj(complexDoub comp) {
	double r, i, i_alt;
	r = comp.real;
	i = comp.imag;
	i_alt = -1 * i;
	complexDoub conj(r, i_alt);
	return conj;
}

complexDoub complexDoub::add(complexDoub compOne, complexDoub compTwo) {
	double rOne, iOne, rTwo, iTwo, rSum, iSum;
	rOne = compOne.real;
	iOne = compOne.imag;
	rTwo = compTwo.real;
	iTwo = compTwo.imag;
	rSum = rOne + rTwo;
	iSum = iOne + iTwo;
	complexDoub sum(rSum, iSum);
	return sum;
}

complexDoub complexDoub::sub(complexDoub compOne, complexDoub compTwo) {
	double rOne, iOne, rTwo, iTwo, rSum, iSum;
	rOne = compOne.real;
	iOne = compOne.imag;
	rTwo = compTwo.real;
	iTwo = compTwo.imag;
	rSum = rOne - rTwo;
	iSum = iOne - iTwo;
	complexDoub sum(rSum, iSum);
	return sum;
}

void complexDoub::print(complexDoub comp) {
	double r, i, check;
	r = comp.real;
	i = comp.imag;
	check = -1 * i;
	if (check >= 0) {
		cout << r << i << "i";
	}
	else {
		cout << r << "+" << i << "i";
	}
}

complexDoub complexDoub::logarithm(complexDoub comp, int k) {
	double r, i, abz, argz, rot, logre, logim;
	r = comp.real;
	i = comp.imag;
	abz = abs(comp);
	argz = arg(comp);
	logre = log(abz);
	rot = 2 * k * pi;
	logim = argz + rot;
	complexDoub logans(logre, logim);
	return logans;
}

complexDoub complexDoub::mult(complexDoub compOne, complexDoub compTwo) {
	//Borrowed from S1W1 Challenge
	double modOne, modTwo, thetaOne, thetaTwo, modSum, theCos, theSin, realSum, imagSum;
	modOne = abs(compOne);
	modTwo = abs(compTwo);
	thetaOne = arg(compOne);
	thetaTwo = arg(compTwo);
	modSum = modOne * modTwo;
	theCos = cos(thetaOne + thetaTwo);
	theSin = sin(thetaOne + thetaTwo);
	realSum = modSum * theCos;
	imagSum = modSum * theSin;
	complexDoub sum(realSum, imagSum);
	return sum;
}

//Redundant but doesn't need you to type the same variable out twice in implementation
complexDoub complexDoub::square(complexDoub comp) {
	double r, i, reSq, imSq, sumRe, sumIm;
	r = comp.real;
	i = comp.imag;
	reSq = pow(r, 2);
	imSq = pow(i, 2);
	sumRe = reSq - imSq;
	sumIm = 2 * r * i;
	complexDoub sum(sumRe, sumIm);
	return sum;
}
//Might do a general power function
complexDoub complexDoub::power(complexDoub comp, int power) {
	if (power == 1) {
		complexDoub sum = comp;
		return sum;
	}
	else if (power == 2) {
		complexDoub sum = square(comp);
		return sum;
	}
	else {
		cout << "Working on it.";
	}
	
}

#endif
