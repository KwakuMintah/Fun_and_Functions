#include <iostream>
using namespace std;
#ifndef FUNCTIONSHEADERDEF
#define FUNCTIONSHEADERDEF

int factorial(int n) {
    int i;
    int fact = 1;
    if (n > 1) {
        for (i = 1; i <= n; i++) {
            fact *= i;
        }
        return fact;
    }
    else {
        cout << "Too small.";
        return fact;
    }
}

int permRep(int n, int sel) {
    int val;
    val = pow(n, sel);
    return val;
}

int permNoRep(int n, int sel) {
    int val, nFact, nMin, nMinFact;
    nFact = factorial(n);
    nMin = n - sel;
    nMinFact = factorial(nMin);
    val = nFact / nMinFact;
    return val;
}

int combRep(int n, int sel) {
    int val, num, den, numFact, selFact, nMin, nMinFact;
    nMin = n - 1;
    num = sel + nMin;
    numFact = factorial(num);
    selFact = factorial(sel);
    nMinFact = factorial(nMin);
    den = selFact * nMinFact;
    val = numFact / den;
    return val;
}

int combNoRep(int n, int sel) {
    int val, nFact, selFact, nMinFact, nMin, den;
    nFact = factorial(n);
    selFact = factorial(sel);
    nMin = n - sel;
    nMinFact = factorial(nMin);
    den = selFact * nMinFact;
    val = nFact / den;
    return val;
}

int arrSize(double arr[]) {
    int count = 0;
    while (arr[count] != NULL) {
        count++;
    }
    int size = count - 1;
    return size;
}

//This prints all combinatios of an array of four elements. Working on making it modular
void printArrOne(double arr[]) {
    int i, j, k, l, size;
    size = arrSize(arr);
    for (i = 0; i < size; i++) {
        for (j = 0; j < size; j++) {
            for (k = 0; k < size; k++) {
                for (l = 0; l < size; l++) {
                    if ((i != j) && (j != k) && (k != l) && (i != k) && (j != l) && (i != l)) {
                        cout << "\n" << arr[i] << "\t" << arr[j] << "\t" << arr[k] << "\t" << arr[l];
                    }
                    else {
                        cout << " ";
                    }
                }
            }
        }
    }
}

void printTest(double arr[], int level) {
    int i, j, lesser, size;
    lesser = level - 1;
    size = arrSize(arr);
    if (level == 0) {
        for (i = 0; i < size; i++) {
            cout << arr[i];
        }
    }
    else {
        for (j = 0; j < size; j++) {
            printTest(arr, lesser);
        }
    }
}

#endif
